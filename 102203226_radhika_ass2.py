# -*- coding: utf-8 -*-
"""102203226_Radhika_ass2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRUhsRr2cGuHL177F-RC3Mu92Sf6tYp_
"""



import pandas as pd
from imblearn.over_sampling import SMOTE, RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from imblearn.combine import SMOTEENN
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load the dataset
data = pd.read_csv('/content/drive/MyDrive/Creditcard_data.csv')

# Check the dataset structure
print("Dataset shape:", data.shape)
print("Class distribution:\n", data['Class'].value_counts())

# Split features and target
X = data.drop('Class', axis=1)
y = data['Class']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Define models
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "Support Vector Machine": SVC(random_state=42),
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "K-Nearest Neighbors": KNeighborsClassifier()
}

# Define sampling methods
sampling_methods = {
    "Original": None,
    "Random Oversampling": RandomOverSampler(random_state=42),
    "Random Undersampling": RandomUnderSampler(random_state=42),
    "SMOTE": SMOTE(random_state=42),
    "SMOTE + ENN": SMOTEENN(random_state=42)
}

# Results list to store the results
results = []

# Evaluate each sampling method
for sampling_name, sampler in sampling_methods.items():
    if sampler is None:
        X_train_sampled, y_train_sampled = X_train, y_train
    else:
        X_train_sampled, y_train_sampled = sampler.fit_resample(X_train, y_train)

    for model_name, model in models.items():
        # Train the model
        model.fit(X_train_sampled, y_train_sampled)

        # Predict on the test set
        y_pred = model.predict(X_test)

        # Evaluate the model
        accuracy = accuracy_score(y_test, y_pred)

        # Add to results list
        results.append({
            "Sampling": sampling_name,
            "Model": model_name,
            "Accuracy": accuracy
        })

# Convert results list to a DataFrame
results_df = pd.DataFrame(results)

# Display results
results_pivot = results_df.pivot(index="Model", columns="Sampling", values="Accuracy")
print(results_pivot)

# Determine the best combination
best_combination = results_df.loc[results_df["Accuracy"].idxmax()]
print("Best Sampling Technique and Model:\n", best_combination)